denormalize <- function(unit_interval_points, range) {
return(unit_interval_points * (range[2]-range[1]) + range[1])
}
# fictitious data for K beacons
fix_beacons <- function(num_beacons,
general_position = FALSE,
X = c(0,   10),
Y = c(0,    7),
Z = c(0, -0.5)){
p <- if (general_position) 3 else 2
initial_design <- MaxPro::MaxProLHD(n = num_beacons, p = p)$Design
design <- MaxPro::MaxPro(InitialDesign = initial_design, s = 2)$Design
if (p == 2) design <- cbind(design, rep(0, num_beacons))
colnames(design) <- c("x", "y", "z")
rownames(design) <- paste0("b", 1:num_beacons)
design[, "x"] <- denormalize(unit_interval_points = design[, "x"], range = X)
design[, "y"] <- denormalize(unit_interval_points = design[, "y"], range = Y)
design[, "z"] <- denormalize(unit_interval_points = design[, "z"], range = Z)
return(design)
}
distance <- function(v1, v2) {
sqrt((v1-v2)%*%(v1-v2))
}
# fictitious data for K beacons
fix_beacons <- function(num_beacons,
general_position = FALSE,
X = c(0,   10),
Y = c(0,    7),
Z = c(0, -0.5)){
stopifnot(num_beacons>=3)
p <- if (general_position) 3 else 2
initial_design <- MaxPro::MaxProLHD(n = num_beacons, p = p)$Design
design <- MaxPro::MaxPro(InitialDesign = initial_design, s = 2)$Design
if (p == 2) design <- cbind(design, rep(0, num_beacons))
colnames(design) <- c("x", "y", "z")
rownames(design) <- paste0("b", 1:num_beacons)
design[, "x"] <- denormalize(unit_interval_points = design[, "x"], range = X)
design[, "y"] <- denormalize(unit_interval_points = design[, "y"], range = Y)
design[, "z"] <- denormalize(unit_interval_points = design[, "z"], range = Z)
return(design)
}
fix_beacons(2)
fix_beacons(3)
fix_beacons(3)
fix_beacons(3)
fix_beacons(10)
B <- fix_beacons(10)
distance(B[,1], B, 2)
distance(B[1,], B[2,])
distance(B[1,], B[2:5,])
distance(B[2:5,], B[2:5,])
distance <- function(v1, v2) {
sqrt((v1-v2)%*%(v1-v2))[1]
}
distance(B[2:5,], B[2:5,])
distance(B[2,], B[2,])
distance(c(0,0,0), B[2,])
sum(B[2,]^2)
sqrt(sum(B[2,]^2))
B[]- B[1,]
B
change_origin(points , origin){
change_origin(points , origin){
change_origin <- function(points , origin){
points - as.matrix(rep(origin, nrow(points)), nrow=nrow(points), byrow = TRUE)
}
change_origin(B, B[1,])
points = B
origin = B[1,]
points - as.matrix(rep(origin, nrow(points)), nrow=nrow(points), byrow = TRUE)
rep(origin, nrow(points))
rep(origin, nrow(points))
as.matrix(rep(origin, nrow(points)), nrow=nrow(points), byrow = TRUE)
points - as.matrix(rep(origin, nrow(points)), nrows=nrow(points), byrow = TRUE)
points - matrix(rep(origin, nrow(points)), nrows=nrow(points), byrow = TRUE)
points - matrix(rep(origin, nrow(points)), nrow=nrow(points), byrow = TRUE)
change_origin <- function(points , origin){
points - matrix(rep(origin, nrow(points)), nrow=nrow(points), byrow = TRUE)
}
dist
dist(B)
?dist
D <- dist(rbind(P1, P2))
D <- dist(rbind(B[1:5,], B[6:10,]))
D
D <- dist(rbind(B[1:5,], B[6:10,]), upper = TRUE, diag = TRUE)
D
D <- dist(rbind(B[1:5,], B[6:10,]), diag = TRUE)
D
distance(P1, P2){
distance(P1, P2){
distance <- function(P1, P2){
D <- dist(rbind(P1, P2))
D[1:nrow(P1), (nrow(P1)+1):nrow(P2)]
}
distance(B[1,], B[2,])
distance <- function(P1, P2){
if(is.vector(P1)) {
P1 <- matrix(P1, nrow = 1)
}
if(is.vector(P2)) {
P2 <- matrix(P2, nrow = 1)
}
D <- dist(rbind(P1, P2))
D[1:nrow(P1), (nrow(P1)+1):nrow(P2)]
}
distance
distance(B[1,], B[2,])
distance(B[1:4,], B[2:4,])
distance <- function(P1, P2){
if(is.vector(P1)) {
P1 <- matrix(P1, nrow = 1)
}
if(is.vector(P2)) {
P2 <- matrix(P2, nrow = 1)
}
D <- dist(rbind(P1, P2), diag = TRUE)
D[1:nrow(P1), (nrow(P1)+1):nrow(P2)]
}
distance(B[1:4,], B[2:4,])
distance <- function(P1, P2){
browser()
if(is.vector(P1)) {
P1 <- matrix(P1, nrow = 1)
}
if(is.vector(P2)) {
P2 <- matrix(P2, nrow = 1)
}
D <- dist(rbind(P1, P2), diag = TRUE)
D[1:nrow(P1), (nrow(P1)+1):nrow(P2)]
}
distance(B[1:4,], B[2:4,])
D
1:nrow(P1)
(nrow(P1)+1):nrow(P2)
distance <- function(P1, P2){
if(is.vector(P1)) {
P1 <- matrix(P1, nrow = 1)
}
if(is.vector(P2)) {
P2 <- matrix(P2, nrow = 1)
}
D <- dist(rbind(P1, P2), diag = TRUE)
D[1:nrow(P1), (nrow(P1)+1):nrow(D)]
}
distance(B[1:4,], B[2:4,])
distance <- function(P1, P2){
browser
if(is.vector(P1)) {
P1 <- matrix(P1, nrow = 1)
}
if(is.vector(P2)) {
P2 <- matrix(P2, nrow = 1)
}
D <- dist(rbind(P1, P2), diag = TRUE)
D[1:nrow(P1), (nrow(P1)+1):nrow(D)]
}
distance(B[1:4,], B[2:4,])
distance <- function(P1, P2){
browser()
if(is.vector(P1)) {
P1 <- matrix(P1, nrow = 1)
}
if(is.vector(P2)) {
P2 <- matrix(P2, nrow = 1)
}
D <- dist(rbind(P1, P2), diag = TRUE)
D[1:nrow(P1), (nrow(P1)+1):nrow(D)]
}
distance(B[1:4,], B[2:4,])
1:nrow(P1)
(nrow(P1)+1):nrow(D)
(nrow(P1)+1)
nrow(D)
class(D)
as.matrix(D)
distance <- function(P1, P2){
#browser()
if(is.vector(P1)) {
P1 <- matrix(P1, nrow = 1)
}
if(is.vector(P2)) {
P2 <- matrix(P2, nrow = 1)
}
D <- as.matrix(dist(rbind(P1, P2), diag = TRUE))
D[1:nrow(P1), (nrow(P1)+1):nrow(D)]
}
distance(B[1:4,], B[2:4,])
distance(B[1:4,], B[1,])
distance(B[1,], B[1,])
distance(B[2,], B[1,])
distance <- function(P1, P2){
#browser()
if(is.vector(P1)) {
P1 <- matrix(P1, nrow = 1)
}
if(is.vector(P2)) {
P2 <- matrix(P2, nrow = 1)
}
D <- as.matrix(dist(rbind(P1, P2), diag = TRUE))
matrix(D[1:nrow(P1), (nrow(P1)+1):nrow(D)], nrow = nrow(P1))
}
distance(B[2,], B[1,])
distance <- function(P1, P2){
#browser()
if(is.vector(P1)) {
P1 <- matrix(P1, nrow = 1)
}
if(is.vector(P2)) {
P2 <- matrix(P2, nrow = 1)
}
D <- as.matrix(dist(rbind(P1, P2), diag = TRUE))
D <- matrix(D[1:nrow(P1), (nrow(P1)+1):nrow(D)], nrow = nrow(P1))
colnames(D) <- rownames(P2)
rownames(D) <- rownames(P1)
return(D)
}
distance(B[2,], B[1,])
distance(B[2,], B[1:2,])
distance(B[2:3,], B[1:2,])
load_all()
document()
use_description()
document()
load_all()
ls()
load_all()
use_test("example")
B <- fix_beacons(4)
use_r("utils-trilaterate.R")
distance(c(0, 0, -1.5), B)
DD <- distance(c(0, 0, -1.5), B)
library(gurobi)
?gurobi
?slam
??slam
library(gurobi)
library(Matrix)
B <- fix_beacons(4)
base_point_index <- 1
b <- change_origin(points = B, origin = B[base_point_index,])
b
p <- c(0, 0, -3)
r <- distance(P1 = P, P2 = B)
r <- distance(P1 = p, P2 = B)
r
base_point_index <- 1
b <- change_origin(points = B, origin = B[base_point_index,])
norm(p)
norm(B)
norm(as.matrix(p))
lapply(X = 1:nrow(B),
FUN = function(j) {
0.5*(r[base_point_index]^2 -
r[j]^2 +
norm(as.matrix(B[j,])) -
norm(as.matrix(B[base_point_index,]))
)
}
)
base_point_index <- 3
b <- change_origin(points = B, origin = B[base_point_index,])
lapply(X = 1:nrow(B),
FUN = function(j) {
0.5*(r[base_point_index]^2 -
r[j]^2 +
norm(as.matrix(B[j,])) -
norm(as.matrix(B[base_point_index,]))
)
}
)
base_point_index <- 3
b <- change_origin(points = B, origin = B[base_point_index,])
c_values <- lapply(
X = 1:nrow(B),
FUN = function(j) {
0.5*(r[base_point_index]^2 -
r[j]^2 +
norm(as.matrix(B[j,])) -
norm(as.matrix(B[base_point_index,])))
}
c_values <- unlist(c_values)
c_values <- lapply(
X = 1:nrow(B),
FUN = function(j) {
0.5*(r[base_point_index]^2 -
r[j]^2 +
norm(as.matrix(B[j,])) -
norm(as.matrix(B[base_point_index,])))
}
c_values <- unlist(c_values)
base_point_index <- 1
b <- change_origin(points = B, origin = B[base_point_index,])
c_values <- lapply(
X = 1:nrow(B),
FUN = function(j) {
0.5*(r[base_point_index]^2 -
r[j]^2 +
norm(as.matrix(B[j,])) -
norm(as.matrix(B[base_point_index,])))
})
c_values <- unlist(c_values)
c_values
A <- change_origin(points = B, origin = B[base_point_index,])
c_values <- lapply(
X = 1:nrow(B),
FUN = function(j) {
0.5*(r[base_point_index]^2 -
r[j]^2 +
norm(as.matrix(B[j,])) -
norm(as.matrix(B[base_point_index,])))
})
c_values <- unlist(c_values)
trilateration_params <- function(distances, beacons, base_point_index = 1){
A <- change_origin(points = B, origin = B[base_point_index,])
c_values <- lapply(
X = 1:nrow(B),
FUN = function(j) {
0.5*(r[base_point_index]^2 -
r[j]^2 +
norm(as.matrix(B[j,])) -
norm(as.matrix(B[base_point_index,])))
})
c_values <- unlist(c_values)
list(
base_point_index = base_point_index,
A = A,
c_values = c_values
)
}
trilateration_params(distances = r, beacons = B, base_point_index = 1)
norm((A %*% x))
x <- c(1,1,1)
norm((A %*% x))
x <- c(0,0,0)
norm((A %*% x))
norm((A %*% x - c_values))
tri_params <- trilateration_params(distances = r, beacons = B, base_point_index = 1)
x<- c(0, 0, 0)
norm((tri_params$A %*% x - tri_params$c_values))
list(a=1, b=2, c=3)
A <- list(a=1, b=2, c=3)
unlist(A)
a <- unlist(A)
a[which(a) == min(a)]
a[which(a == min(a))]
a[which(a == mx(a))]
a[which(a == max(a))]
a[which(a == max(a))] %%> name
a[which(a == max(a))] %>% name
name(a[which(a == max(a))])
names(a[which(a == max(a))])
